<%= form_for(product) do |f| %>
  <% if product.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(product.errors.count, "error") %> prohibited this product from being saved:</h2>

      <ul>
      <% product.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <input type="hidden" id="product_id" value='<%=product[:id]%>'>
  
  <div class="field">
    <%= f.label :name %>
    <%= f.text_field :name %>
  </div>

  <div class="field">
    <%= f.label :price %>
    <%= f.text_field :price %>
  </div>

  <div class="field">
    <%= f.label :description %>
    <%= f.text_field :description %>
  </div>

  <div class="field">
    <%= f.label :location %>
    <%= f.text_field :location %>
  </div>

  <div class="field" id="uploaded_images">

  </div>

  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>


<script type="text/template" id="qq-template-s3">
  <div class="qq-uploader-selector qq-uploader qq-gallery" qq-drop-area-text="Drop files here">
      <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
          <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
      </div>
      <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
          <span class="qq-upload-drop-area-text-selector"></span>
      </div>
      <div class="qq-upload-button-selector qq-upload-button">
          <div>Upload a file</div>
      </div>
      <span class="qq-drop-processing-selector qq-drop-processing">
          <span>Processing dropped files...</span>
          <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
      </span>
      <ul class="qq-upload-list-selector qq-upload-list" role="region" aria-live="polite" aria-relevant="additions removals">
          <li>
              <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
              <div class="qq-progress-bar-container-selector qq-progress-bar-container">
                  <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
              </div>
              <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
              <div class="qq-thumbnail-wrapper">
                  <img class="qq-thumbnail-selector" qq-max-size="120" qq-server-scale>
              </div>
              <button type="button" class="qq-upload-cancel-selector qq-upload-cancel">X</button>
              <button type="button" class="qq-upload-retry-selector qq-upload-retry">
                  <span class="qq-btn qq-retry-icon" aria-label="Retry"></span>
                  Retry
              </button>

              <div class="qq-file-info">
                  <div class="qq-file-name">
                      <span class="qq-upload-file-selector qq-upload-file"></span>
                      <span class="qq-edit-filename-icon-selector qq-btn qq-edit-filename-icon" aria-label="Edit filename"></span>
                  </div>
                  <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                  <span class="qq-upload-size-selector qq-upload-size"></span>
                  <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">
                      <span class="qq-btn qq-delete-icon" aria-label="Delete"></span>
                  </button>
                  <button type="button" class="qq-btn qq-upload-pause-selector qq-upload-pause">
                      <span class="qq-btn qq-pause-icon" aria-label="Pause"></span>
                  </button>
                  <button type="button" class="qq-btn qq-upload-continue-selector qq-upload-continue">
                      <span class="qq-btn qq-continue-icon" aria-label="Continue"></span>
                  </button>
              </div>
          </li>
      </ul>

      <dialog class="qq-alert-dialog-selector">
          <div class="qq-dialog-message-selector"></div>
          <div class="qq-dialog-buttons">
              <button type="button" class="qq-cancel-button-selector">Close</button>
          </div>
      </dialog>

      <dialog class="qq-confirm-dialog-selector">
          <div class="qq-dialog-message-selector"></div>
          <div class="qq-dialog-buttons">
              <button type="button" class="qq-cancel-button-selector">No</button>
              <button type="button" class="qq-ok-button-selector">Yes</button>
          </div>
      </dialog>

      <dialog class="qq-prompt-dialog-selector">
          <div class="qq-dialog-message-selector"></div>
          <input type="text">
          <div class="qq-dialog-buttons">
              <button type="button" class="qq-cancel-button-selector">Cancel</button>
              <button type="button" class="qq-ok-button-selector">Ok</button>
          </div>
      </dialog>
  </div>
</script>

<title>Fine Uploader Gallery UI</title>

<div id="uploader"></div>
<script>
  // Some options to pass to the uploader are discussed on the next page
  $('#uploader').fineUploaderS3({
    template: 'qq-template-s3',
    debug: true,
    request: {
        endpoint: "https://gv-images.s3.amazonaws.com",
        accessKey: "AKIAJVGIQXZQUVKXBFVA",
        params: {category: "foobar"}  
    },
    signature: {
        endpoint: "/s3/signatureHandler"
    },
    uploadSuccess: {
        endpoint: "/s3/uploadSuccessful"
    },
    iframeSupport: {
        localBlankPagePath: "/s3/blank"
    },
    objectProperties: {
      // Since we want all items to be publicly accessible w/out a server to return a signed URL
      acl: "public-read",
      // The key for each file will follow this format: {USER_NAME}/{UUID}.{FILE_EXTENSION}
      key: function(id) {
          var filename = this.getName(id),
              uuid = this.getUuid(id);

          return qq.format("upload/{}.{}", uuid, qq.getExtension(filename));
      }
    },
    validation: {
        allowedExtensions: ["gif", "jpeg", "jpg", "png"],
        acceptFiles: "image/gif, image/jpeg, image/png",
        sizeLimit: 5000000,
        itemLimit: 10
    },
    retry: {
        enableAuto: true
    },
    chunking: {
        enabled: true
    },
    resume: {
        enabled: true
    },
    deleteFile: {
        enabled: true,
        endpoint: "/s3/fileHandler"
    },
    paste: {
        targetElement: document,
        promptForName: true
    },
    session: {
        endpoint: "/s3/initImage",
        params: {
          id: $("#product_id").val()
        }
    }
  })
  .on('complete', function(event, id, fileName, responseJSON) {
    uuid = responseJSON.uuid
    var input_name = $("<input />", { type:'hidden', name:'uploaded_images['+id+'][name]', value: responseJSON['name']})
    var input_uuid = $("<input />", { type:'hidden', name:'uploaded_images['+id+'][uuid]', value: responseJSON['uuid']})
    var input_key = $("<input />", { type:'hidden', name:'uploaded_images['+id+'][key]', value: responseJSON['key']})
    $("#uploaded_images").append(input_name)
    $("#uploaded_images").append(input_uuid)
    $("#uploaded_images").append(input_key)
  })
  .on('sessionRequestComplete', function(event, responseJSON, success){
    console.log(responseJSON);
    for(var i in responseJSON)
    {
      image = responseJSON[i]
      var input_name = $("<input />", { type:'hidden', name:'uploaded_images['+i+'][name]', value: image['name']})
      var input_uuid = $("<input />", { type:'hidden', name:'uploaded_images['+i+'][uuid]', value: image['uuid']})
      var input_key = $("<input />", { type:'hidden', name:'uploaded_images['+i+'][key]', value: image['key']})
      $("#uploaded_images").append(input_name)
      $("#uploaded_images").append(input_uuid)
      $("#uploaded_images").append(input_key)
    }
  })
  .on('deleteComplete', function(event, id){
    $(":input[name^='uploaded_images[" + id + "]']").remove()
  });
</script>